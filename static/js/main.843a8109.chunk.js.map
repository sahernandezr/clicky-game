{"version":3,"sources":["components/Nav/index.js","components/Header/index.js","components/Wrapper/index.js","components/Character/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","href","target","score","topScore","Header","children","message","Wrapper","Character","onClick","setClicked","id","alt","name","src","image","App","state","characters","clickedCharacter","filter","character","clicked","alert","i","length","setState","console","log","sort","a","b","Math","random","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0iEAYeA,MATf,SAAaC,GACT,OACI,wBAAIC,UAAU,OACV,wBAAIA,UAAU,eAAeC,KAAK,uDAAuDC,OAAO,UAAhG,uBACA,wBAAIF,UAAU,YAAd,UAAiCD,EAAMI,MAAvC,iBAA4DJ,EAAMK,Y,MCO/DC,MAXf,SAAgBN,GACZ,OACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,aACP,wBAAIA,UAAU,aAAaD,EAAMO,UACjC,uBAAGN,UAAU,QAAQD,EAAMQ,Y,MCDhCC,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMO,W,MCmB1BG,MAnBf,SAAmBV,GAKf,OACA,yBAAKW,QAAS,kBAAMX,EAAMY,WAAWZ,EAAMa,KAEzCZ,UAAU,QACV,yBAAKA,UAAU,iBACb,yBACEa,IAAKd,EAAMe,KACXC,IAAKhB,EAAMiB,W,OCRjBb,EAAQ,EACRC,EAAW,EACXG,EAAU,0EA6FCU,E,2MA1FbC,MAAQ,CACNC,aACAhB,QACAC,WACAG,W,EAKFI,WAAa,SAAAC,GAEX,IAAMO,EAAa,EAAKD,MAAMC,WAExBC,EAAmBD,EAAWE,QAAO,SAAAC,GAAS,OAAIA,EAAUV,KAAOA,KAEzE,GAAIQ,EAAiB,GAAGG,QAAS,CAC/BC,MAAM,oDACNrB,EAAQ,EACRI,EAAU,0EAEV,IAAK,IAAIkB,EAAI,EAAGA,EAAIN,EAAWO,OAAQD,IACrCN,EAAWM,GAAGF,SAAU,EAG1B,EAAKI,SAAS,CAAEpB,YAChB,EAAKoB,SAAS,CAAExB,UAChB,EAAKwB,SAAS,CAAER,oBACX,GAAIhB,EAAO,GAChBiB,EAAiB,GAAGG,SAAU,EAC9BK,QAAQC,IAAIT,EAAiB,GAAGG,SAChCpB,IACAI,EAAU,mDAENJ,EAAMC,IACRA,EAASD,EACT,EAAKwB,SAAS,CAAEvB,cAIlBe,EAAWW,MAAK,SAASC,EAAEC,GAAG,MAAO,GAAMC,KAAKC,YAEhD,EAAKP,SAAS,CAAER,eAChB,EAAKQ,SAAS,CAAExB,UAChB,EAAKwB,SAAS,CAAEpB,gBACX,CAELiB,MAAM,uBACNJ,EAAiB,GAAGG,SAAQ,EAC5BpB,EAAM,EACNI,EAAS,0EACTH,EAAS,GACT,EAAKuB,SAAS,CAAEvB,aAEhB,IAAK,IAAIqB,EAAI,EAAGA,EAAIN,EAAWO,OAAQD,IACrCN,EAAWM,GAAGF,SAAU,EAG1BJ,EAAWW,MAAK,SAASC,EAAEC,GAAG,MAAO,GAAMC,KAAKC,YAEhD,EAAKP,SAAS,CAAER,eAChB,EAAKQ,SAAS,CAAExB,UAChB,EAAKwB,SAAS,CAAEpB,c,wEAKV,IAAD,OACP,OACE,yBAAKP,UAAU,aACb,kBAAC,EAAD,CAAKG,MAAOgC,KAAKjB,MAAMf,MAAOC,SAAU+B,KAAKjB,MAAMd,WACnD,kBAAC,EAAD,CAAQG,QAAS4B,KAAKjB,MAAMX,SAA5B,gBAGA,kBAAC,EAAD,KAEI4B,KAAKjB,MAAMC,WAAWiB,KAAI,SAACd,EAAWG,GAAZ,OACxB,kBAAC,EAAD,CACAd,WAAY,EAAKA,WACjBC,GAAIU,EAAUV,GACdyB,IAAKf,EAAUV,GACfE,KAAMQ,EAAUR,KAChBE,MAAOM,EAAUN,iB,GAlFbsB,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.843a8109.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Nav(props) {\r\n    return (\r\n        <ul className=\"nav\">\r\n            <li className=\"navbar-brand\" href=\"https://sahernandezr.github.io/Responsive-Portfolio/\" target=\"_blank\">Sandra Hern√°ndez</li>\r\n            <li className=\"nav-item\">Score: {props.score} | Top score: {props.topScore}</li>\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">\r\n                    <h1 className=\"display-4\">{props.children}</h1>\r\n                    <p className=\"lead\">{props.message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Character(props) {\r\n  // function sayHello () {\r\n  //   alert(\"hello\");\r\n  // }\r\n\r\n    return (\r\n    <div onClick={() => props.setClicked(props.id) \r\n    //console.log(props.id)\r\n    } className=\"card\">\r\n      <div className=\"img-container\" >\r\n        <img\r\n          alt={props.name}\r\n          src={props.image}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Character;","import React, { Component } from 'react';\nimport './App.css';\nimport Nav from \"./components/Nav\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport Character from \"./components/Character\";\nimport characters from \"./characters.json\";\n\nlet score = 0;\nlet topScore = 0;\nlet message = \"Click on an image to earn points, but don't click on any more than once\";\n\nclass App extends Component {\n  state = {\n    characters,\n    score,\n    topScore,\n    message\n  };\n\n  \n\n  setClicked = id => {\n    //array of characters\n    const characters = this.state.characters;\n    //filter by clicked\n    const clickedCharacter = characters.filter(character => character.id === id);\n    //if image has already been clicked (clicked=true), player losses\n    if (clickedCharacter[0].clicked) {\n      alert(\"You had already clicked that one! You just lost!\")\n      score = 0;\n      message = \"Click on an image to earn points, but don't click on any more than once\";\n\n      for (let i = 0; i < characters.length; i++) {\n        characters[i].clicked = false;\n      }\n\n      this.setState({ message });\n      this.setState({ score });\n      this.setState({ characters });\n    } else if (score <11) {\n      clickedCharacter[0].clicked = true;\n      console.log(clickedCharacter[0].clicked);\n      score++;\n      message = \"Great choice! You hadn't picked that one out yet\";\n\n      if (score>topScore) {\n        topScore=score;\n        this.setState({ topScore});\n      }\n\n      //change the order of the cards\n      characters.sort(function(a,b){return 0.5 - Math.random()});\n\n      this.setState({ characters });\n      this.setState({ score });\n      this.setState({ message });\n    } else {\n      //if the player is making the final 12th selection\n      alert(\"You won! Play again\")\n      clickedCharacter[0].clicked=true;\n      score=0;\n      message= \"Click on an image to earn points, but don't click on any more than once\";\n      topScore=12;\n      this.setState({ topScore });\n      //restarted all clicked properties to false\n      for (let i = 0; i < characters.length; i++) {\n        characters[i].clicked = false;\n      }\n      //mix the order of the cards\n      characters.sort(function(a,b){return 0.5 - Math.random()});\n\n      this.setState({ characters });\n      this.setState({ score });\n      this.setState({ message });\n    }\n  \n  };\n\n  render() {\n    return (\n      <div className=\"wholeSite\">\n        <Nav score={this.state.score} topScore={this.state.topScore} />\n        <Header message={this.state.message}>Clicky Game!</Header>\n\n\n        <Wrapper>\n          {\n            this.state.characters.map((character, i) =>\n              <Character \n              setClicked={this.setClicked}\n              id={character.id} \n              key={character.id}\n              name={character.name} \n              image={character.image} />\n            )\n          }\n        </Wrapper>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}